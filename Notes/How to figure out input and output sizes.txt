ML engineers do this by passing a dummy input. Instead of defining a nn stack, each layer is defined as a method.
You can run these individually and figure out output sizes:

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.pool = nn.MaxPool2d(2, 2) 
        
        # Dynamically compute fc1 input size
        self._to_linear = None
        self._compute_conv_output()

        self.fc1 = nn.Linear(self._to_linear, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)


    def _compute_conv_output(self):
        with torch.no_grad():
            sample_input = torch.randn(1, 1, 28, 28)  # Batch size 1, 1 channel, 28x28 image
            output = self.pool(self.conv1(sample_input))
            output = self.pool(self.conv2(output))
            self._to_linear = output.view(-1).shape[0]  # Flatten and get feature size

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)  # Flatten before FC layers
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x



* self._to_linear = output.view(-1).shape[0]: output is a 4D tensor with shape (batch_size, channels, height, width)
* .view(-1) flattens the entire tensor into a 1D tensor (vector).
* .shape[0] gives the total number of elements in the flattened tensor 
* x = x.view(x.size(0), -1): x.size(0) gives batch size automatically and -1 tells Python to flatten everything left

* We could alternatively use output.shape() and multiply the dimensions ourselves, but we want our model to 
  generalize better. So it is considered best practice to automate the process. 





Also useful to do this theoretically sometimes

Output size calculation
-----------------------   
 
H = height of input
W = width of input
K = kernel size
S = stride
P = padding



                    Output size= (H − K + 2P) / S   + 1

eg: 28 * 28 has with a 5x5 kernel (i.e. size 5) and stride 1 has output 24x24
