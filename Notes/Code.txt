FashionMNIST visualization 



# Importing dependencies
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

import torchvision
import torchvision.transforms as transforms

import matplotlib as plt
import numpy as np



# transforms

transform = transforms.Compose(
    [transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])   #Normalizes gray pixels to mean 0.5 and std 0.5



# datasets

trainset = torchvision.datasets.FashionMNIST(
    root = 'data',
    download=True,
    train=True,
    transform=transform)

testset = torchvision.datasets.FashionMNIST(
    root = 'data',
    download=True,
    train=True,
    transforms=transforms)





# dataloaders

trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)  #num workers sets num of parallel processes

testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
           'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')




# helper function for showing images with plt

def matplotlib_imshow(img, one_channel=False):
    if one_channel:
        img = img.mean(dim=0)    # avergaes across the RGB channels dimension, which converts color image into gray
    img = img / 2 + 0.5     # unnormalize from [-1, 1] to [0, 1]
    npimg = img.numpy()
    if one_channel:
        plt.imshow(npimg, cmap="Greys")
    else:
        plt.imshow(np.transponse(npimg, (1, 2, 0))): changes shape from (C, H, W): color height width to (H, W, C)




# Neural Network

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 4 * 4, 120)              # stands for fully connected layer
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 4 * 4)                         # -1 returns batch size, remainder is turned to 16 * 4 *
        x = F.relu(self.fc1(x))                                                                  4 length 1D tensor
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = Net()



# Optimizer and loss functions

loss_fn = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)  # momentum is 0.0 by default. check questions



# TensorBoard summary setup

from torch.utils.tensorboard import SummaryWriter
writer = SummaryWriter('runs/fashion_mnist_experiment_1')



# Loading and showing images + model

dataiter = iter(trainloader)
images, labels = next(dataiter)
img_grid = torchvision.utils.make_grid(images)
matplotlib_imshow(img_grid, one_channel=True)
writer.add_image('four_fashion_items', img_grid)
writer.add_graph(model, images)
write.close()


((You can run tensorboard --logdir=runs in the cmd terminal and view it on http://localhost:6006 url returned ))




# Adding a projector to tensorboard

def select_n_random(data, labels, n=100):
    
    assert len(data) == len(labels)

    perm = torch.randperm(len(data))
    return data[perm][:n], labels[perm][:n]

images, labels = select_n_random(trainset.data, trainset.targets)
class_labels = [classes[lab] for lab in labels]

features = images.view(-1, 28 * 28)    # Because tensorboard expects images in single row vectors. the -1 tells
                                         pytorch to infer the number of datapoints

writer.add_embedding(features,
                     metadata=class_labels,
                     label_img=images.unsqueeze(1))    # tensorboard expects a color channel as dim 1, unsqueeze
                                                         adds a dimension there. it's just a "list" wrapped around                   
                                                         the 28*28



# Tracking model training with tensorboard

images = images.unsqueeze(1).float()

def images_to_probs(model, images):
    output = model(images)
    scores, pred_class = torch.max(output, 1)          # torch.max returns the highest score and the position 
                                                         (i.e. class label) of the highest score
    preds = np.squeeze(preds_class.numpy())           # Since each input has one prediction, we want shape of
                                                         preds to be (100,) instead of (100, 1)

    return preds, [F.softmax(el, dim=0)[i].item() for i, el in zip(preds, output)]


def plot_classes_pred(model, images, labels):

    preds, probs = images_to_probs(model, images)
    fig = plt.figure(figsize=(12, 48))
    for idx in np.arange(4):
        fig.add_subplot(1, 4, idx+1, xticks=[], yticks=[])
        matplotlib_imshow(images[idx], one_channel=True)
        ax.set_title("{0}, {1:.1f}%\n(label:{2})".format(
             classes[preds[idx]],
             probs[idx]*100.0,
             classes[labels[idx]]),
                  color="green" if preds[idx]==labels[idx].item() else "red"))
    return fig




# Train Loop

model.train()
running_loss = 0.0

for epoch in range(1):

    for i, data in enumerate(trainloader, 0):

        inputs, labels = data
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = loss_fn(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()

        if i % 1000 = 999:

            writer.add_scalar('training_loss',
                              running_loss / 1000,
                              epoch * len(trainloader) + i)

            writer.add_figure('predictions vs labels',
                              plot_classes_pred(model, inputs, labels),
                              global_step=epoch * len(trainloader) + i)
            running_loss = 0.0
print('Finished Training')




# Test Loop

model.eval()
class_probs = []
class_labels = []

with torch.no_grad():
     for data in testloader:
         images, labels = data
         output = model(images)
         class_probs_batch = [F.softmax(logits, dim=0) for logits in output]

         class_probs.append(class_probs_batch)
         class.labels(labels)

test_probs = torch.cat([torch.stack(batch) for batch in class_probs])
test_labels = torch.cat(class_labels)

